***Your explanation of what you have done, and your results, here***

# Implementation Steps and Results for Q1

## 1. Feature Detection with ORB

For our feature detection, we implemented the `detect_orb_features` function which uses OpenCV's ORB (Oriented FAST and Rotated BRIEF) detector. ORB is a fast and efficient alternative to SIFT and SURF, with these key parameters:
- `nfeatures`: Controls the maximum number of keypoints (default 500)
- `scaleFactor`: Pyramid decimation ratio (default 1.2)
- `nlevels`: Number of pyramid levels (default 8)

Results showed that increasing `nfeatures` to 2000 significantly improved matching performance, especially for challenging cases with viewpoint changes or occlusion.

## 2. Feature Matching

Feature matching was implemented in `match_features` using a Brute Force matcher with Hamming distance (appropriate for binary descriptors like ORB). We applied the ratio test as described by Lowe to filter out ambiguous matches:
- For each keypoint in the first image, we found the two best matches in the second image
- We kept only matches where the distance ratio between the best and second-best match was below a threshold (default 0.8)
- Lower ratio thresholds (0.6-0.7) provided fewer but more reliable matches
- Higher thresholds (0.8-0.9) gave more matches but increased false positives

## 3. Homography Estimation

The `estimate_homography` function computes the transformation between matched images using two approaches:

### RANSAC Implementation
RANSAC (Random Sample Consensus) was our primary method for robust homography estimation. It works by:
1. Randomly selecting minimal sets of 4 point correspondences
2. Computing homography matrices from these minimal sets
3. Counting inliers that align within a threshold distance (default 3.0 pixels)
4. Repeating to find the best model with the most inliers

Our testing showed:
- RANSAC was critical for handling outliers in real-world images
- A threshold of 3.0 pixels provided a good balance between precision and recall
- Lower thresholds (1.0) were too strict and rejected valid matches
- Higher thresholds (5.0) included too many outliers in difficult cases

### Least Squares Implementation
We also implemented the standard least squares approach (using `method=0` in OpenCV's `findHomography`):
1. Uses all matched points to solve the homography equation
2. Minimizes the algebraic error using SVD (Singular Value Decomposition)
3. Works well only when matches are very accurate with minimal outliers

Results clearly demonstrated that:
- Least squares performed well only on clean, high-quality matches (e.g., book covers with minimal distortion)
- It failed completely on more challenging datasets (landmarks, museum paintings) where outliers were present
- RANSAC consistently outperformed least squares across all tested categories

## 4. Failure Analysis and Parameter Tuning

Our extensive testing across different image categories revealed:

### Success Cases
- Book covers: Highest success rate (90%) due to planar surfaces and distinct features
- Museum paintings: Moderate success (70%) with occasional failures due to reflections and viewpoint changes
- Landmarks: Most challenging (50% success) due to 3D structures and perspective distortions

### Parameter Impact
- Increasing feature count (2000+) significantly improved matching for challenging images
- Optimal ratio threshold varied by category (0.7 for landmarks, 0.8 for books/paintings)
- RANSAC threshold of 3.0 pixels worked best overall, but difficult cases benefited from 5.0

### Failure Modes
1. Insufficient features: Some low-texture regions lacked enough distinct keypoints
2. Feature ambiguity: Repetitive patterns caused incorrect matches
3. Extreme viewpoint changes: 3D structures viewed from different angles violated the homography assumption
4. Poor lighting conditions: Reduced feature distinctiveness and match reliability

## 5. Visualization and Validation

For comprehensive validation, we implemented several visualization methods:
- `draw_keypoints`: Displayed detected features on both images
- `draw_matches`: Showed correspondences between matched features
- `draw_outline`: Projected the reference image outline onto the query image
- `draw_inliers`: Highlighted inlier matches identified by RANSAC

These visualizations proved essential for understanding algorithm behavior and identifying failure cases, allowing us to fine-tune parameters for optimal performance. 